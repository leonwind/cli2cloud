// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: servicepb/service.proto

package servicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Cli2CloudClient is the client API for Cli2Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Cli2CloudClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Cli2Cloud_PublishClient, error)
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cli2Cloud_SubscribeClient, error)
}

type cli2CloudClient struct {
	cc grpc.ClientConnInterface
}

func NewCli2CloudClient(cc grpc.ClientConnInterface) Cli2CloudClient {
	return &cli2CloudClient{cc}
}

func (c *cli2CloudClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Cli2Cloud_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cli2Cloud_ServiceDesc.Streams[0], "/servicepb.Cli2Cloud/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &cli2CloudPublishClient{stream}
	return x, nil
}

type Cli2Cloud_PublishClient interface {
	Send(*Content) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type cli2CloudPublishClient struct {
	grpc.ClientStream
}

func (x *cli2CloudPublishClient) Send(m *Content) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cli2CloudPublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cli2CloudClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Cli2Cloud_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cli2Cloud_ServiceDesc.Streams[1], "/servicepb.Cli2Cloud/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cli2CloudSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cli2Cloud_SubscribeClient interface {
	Recv() (*Content, error)
	grpc.ClientStream
}

type cli2CloudSubscribeClient struct {
	grpc.ClientStream
}

func (x *cli2CloudSubscribeClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Cli2CloudServer is the server API for Cli2Cloud service.
// All implementations must embed UnimplementedCli2CloudServer
// for forward compatibility
type Cli2CloudServer interface {
	Publish(Cli2Cloud_PublishServer) error
	Subscribe(*Empty, Cli2Cloud_SubscribeServer) error
	mustEmbedUnimplementedCli2CloudServer()
}

// UnimplementedCli2CloudServer must be embedded to have forward compatible implementations.
type UnimplementedCli2CloudServer struct {
}

func (UnimplementedCli2CloudServer) Publish(Cli2Cloud_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedCli2CloudServer) Subscribe(*Empty, Cli2Cloud_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCli2CloudServer) mustEmbedUnimplementedCli2CloudServer() {}

// UnsafeCli2CloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Cli2CloudServer will
// result in compilation errors.
type UnsafeCli2CloudServer interface {
	mustEmbedUnimplementedCli2CloudServer()
}

func RegisterCli2CloudServer(s grpc.ServiceRegistrar, srv Cli2CloudServer) {
	s.RegisterService(&Cli2Cloud_ServiceDesc, srv)
}

func _Cli2Cloud_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Cli2CloudServer).Publish(&cli2CloudPublishServer{stream})
}

type Cli2Cloud_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*Content, error)
	grpc.ServerStream
}

type cli2CloudPublishServer struct {
	grpc.ServerStream
}

func (x *cli2CloudPublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cli2CloudPublishServer) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Cli2Cloud_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Cli2CloudServer).Subscribe(m, &cli2CloudSubscribeServer{stream})
}

type Cli2Cloud_SubscribeServer interface {
	Send(*Content) error
	grpc.ServerStream
}

type cli2CloudSubscribeServer struct {
	grpc.ServerStream
}

func (x *cli2CloudSubscribeServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

// Cli2Cloud_ServiceDesc is the grpc.ServiceDesc for Cli2Cloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cli2Cloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicepb.Cli2Cloud",
	HandlerType: (*Cli2CloudServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Cli2Cloud_Publish_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Cli2Cloud_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "servicepb/service.proto",
}
